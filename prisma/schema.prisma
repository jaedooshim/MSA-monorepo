// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum memberRole {
  Normal
  Best
}

model Member {
  id          String     @id @default(uuid())
  name        String     @db.VarChar()
  email       String     @db.VarChar()
  password    String     @db.VarChar()
  phoneNumber String     @map("phone_number") @db.VarChar()
  address     String     @db.VarChar()
  subAddress  String     @map("sub_address") @db.VarChar()
  role        memberRole @default(Normal)
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime?  @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt   DateTime?  @map("deleted_at") @db.Timestamp(3)
  comments    Comment[]
  products    Product[]
}

enum adminRole {
  Sales
  Operators
}

model Admin {
  id          String    @id @default(uuid())
  name        String    @db.VarChar()
  email       String    @db.VarChar()
  password    String    @db.VarChar()
  phoneNumber String    @map("phone_number") @db.VarChar()
  address     String    @db.VarChar()
  subAddress  String    @map("sub_address") @db.VarChar()
  role        adminRole
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(3)
  comments    Comment[]
  products    Product[]
}

enum status {
  Sales // 판매중
  SoldOut // 판매완료
  Schedule // 예약중
}

model Product {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar()
  content    String    @db.VarChar()
  price      BigInt    @db.BigInt
  status     status
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp(3)
  Member     Member?   @relation(fields: [memberId], references: [id])
  memberId   String?
  Admin      Admin?    @relation(fields: [adminId], references: [id])
  adminId    String?
  comments   Comment[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar()
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(3)
  Member    Member?   @relation(fields: [memberId], references: [id])
  memberId  String?
  Admin     Admin?    @relation(fields: [adminId], references: [id])
  adminId   String?
  Product   Product?  @relation(fields: [productId], references: [id])
  productId Int?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar()
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(3)
  Product   Product[]
}
